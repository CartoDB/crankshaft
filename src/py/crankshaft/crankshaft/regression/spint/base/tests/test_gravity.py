
"""
Tests for gravity-style spatial interaction models

Test data is the Austria migration dataset used in Dennet's (2012) practical primer
on spatial interaction modeling. The data was made avialable through the
following dropbox link: http://dl.dropbox.com/u/8649795/AT_Austria.csv.
The data has been pre-filtered so that there are no intra-zonal flows,

Dennett, A. (2012). Estimating flows between geographical locations:get me
started in spatial interaction modelling (Working Paper No. 184). UCL: Citeseer.

"""

import unittest
import math
import numpy as np
from pysal.contrib.spint import gravity as grav

class TestGravity(unittest.TestCase):
    """Tests for gravity-type models"""

    def setUp(self):
        self.f =  np.array([ 1131,  1887,    69,   738,    98,    31,    43,    19,  1633,
            14055,   416,  1276,  1850,   388,   303,   159,  2301, 20164,
            1080,  1831,  1943,   742,   674,   407,    85,   379,  1597,
            1608,   328,   317,   469,   114,   762,  1110,  2973,  1252,
            1081,   622,   425,   262,   196,  2027,  3498,   346,  1332,
            2144,   821,   274,    49,   378,  1349,   310,   851,  2117,
            630,   106,    87,   424,   978,   490,   670,   577,   546,
            569,    33,   128,   643,   154,   328,   199,   112,   587])

        self.o = np.array(['AT11', 'AT11', 'AT11', 'AT11', 'AT11', 'AT11', 'AT11', 'AT11',
            'AT12', 'AT12', 'AT12', 'AT12', 'AT12', 'AT12', 'AT12', 'AT12',
            'AT13', 'AT13', 'AT13', 'AT13', 'AT13', 'AT13', 'AT13', 'AT13',
            'AT21', 'AT21', 'AT21', 'AT21', 'AT21', 'AT21', 'AT21', 'AT21',
            'AT22', 'AT22', 'AT22', 'AT22', 'AT22', 'AT22', 'AT22', 'AT22',
            'AT31', 'AT31', 'AT31', 'AT31', 'AT31', 'AT31', 'AT31', 'AT31',
            'AT32', 'AT32', 'AT32', 'AT32', 'AT32', 'AT32', 'AT32', 'AT32',
            'AT33', 'AT33', 'AT33', 'AT33', 'AT33', 'AT33', 'AT33', 'AT33',
            'AT34', 'AT34', 'AT34', 'AT34', 'AT34', 'AT34', 'AT34', 'AT34'])
        
        self.d = np.array(['AT12', 'AT13', 'AT21', 'AT22', 'AT31', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT13', 'AT21', 'AT22', 'AT31', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT21', 'AT22', 'AT31', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT22', 'AT31', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT21', 'AT31', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT21', 'AT22', 'AT32', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT21', 'AT22', 'AT31', 'AT33', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT21', 'AT22', 'AT31', 'AT32', 'AT34',
            'AT11', 'AT12', 'AT13', 'AT21', 'AT22', 'AT31', 'AT32', 'AT33'])
        
        self.dij = np.array([ 103.001845,   84.204666,  220.811933,  132.00748 ,  214.511814,
            246.933305,  390.85611 ,  505.089539,  103.001845,   45.796272,
            216.994739,  129.878172,  140.706671,  201.232355,  343.50075 ,
            453.515594,   84.204666,   45.796272,  249.932874,  158.630661,
            186.420738,  244.108305,  387.61776 ,  498.407152,  220.811933,
            216.994739,  249.932874,   92.407958,  151.777157,   92.894408,
            194.851669,  306.105825,  132.00748 ,  129.878172,  158.630661,
            92.407958,  124.563096,  122.433524,  261.893783,  376.34667 ,
            214.511814,  140.706671,  186.420738,  151.777157,  124.563096,
            81.753652,  208.456383,  314.793199,  246.933305,  201.232355,
            244.108305,   92.894408,  122.433524,   81.753652,  145.076472,
            258.591197,  390.85611 ,  343.50075 ,  387.61776 ,  194.851669,
            261.893783,  208.456383,  145.076472,  114.46325 ,  505.089539,
            453.515594,  498.407152,  306.105825,  376.34667 ,  314.793199,
            258.591197,  114.46325 ])
        
        self.o_var = np.array([ 4320,  4320,  4320,  4320,  4320,  4320,  4320,  4320, 21478,
            21478, 21478, 21478, 21478, 21478, 21478, 21478, 30500, 30500,
            30500, 30500, 30500, 30500, 30500, 30500,  5012,  5012,  5012,
            5012,  5012,  5012,  5012,  5012,  8811,  8811,  8811,  8811,
            8811,  8811,  8811,  8811, 11349, 11349, 11349, 11349, 11349,
            11349, 11349, 11349,  6021,  6021,  6021,  6021,  6021,  6021,
            6021,  6021,  4477,  4477,  4477,  4477,  4477,  4477,  4477,
            4477,  2275,  2275,  2275,  2275,  2275,  2275,  2275,  2275])
        
        self.d_var = np.array([27169, 28710,  4354,  9069,  8577,  4963,  3923,  2026,  5452,
            28710,  4354,  9069,  8577,  4963,  3923,  2026,  5452, 27169,
            4354,  9069,  8577,  4963,  3923,  2026,  5452, 27169, 28710,
            9069,  8577,  4963,  3923,  2026,  5452, 27169, 28710,  4354,
            8577,  4963,  3923,  2026,  5452, 27169, 28710,  4354,  9069,
            4963,  3923,  2026,  5452, 27169, 28710,  4354,  9069,  8577,
            3923,  2026,  5452, 27169, 28710,  4354,  9069,  8577,  4963,
            2026,  5452, 27169, 28710,  4354,  9069,  8577,  4963,  3923])
    
    def test_BaseGravity_exp(self):
        f = np.array(self.f).reshape((-1,1))
        dij = np.array(self.dij).reshape((-1,1))
        model = grav.BaseGravity(f, dij, 'exp')
        np.testing.assert_allclose(model.params, [0.01641585], atol = .0001)
        self.assertAlmostEqual(model.aic, 957622.28429746185, delta = .0001)
        np.testing.assert_allclose(model.cov_params, [[  1.92096665e-10]])
        self.assertAlmostEqual(model.deviance, 1087408.9707170483, delta = .0001)
        self.assertAlmostEqual(model.llf, -478810.14214873099, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, [ 0.])
        np.testing.assert_allclose(model.std_err, [  1.38598941e-05])
        np.testing.assert_allclose(model.tvalues, [ 1184.41355888])
        np.testing.assert_allclose(model.yhat, 
            [  5.42415692e+00,   3.98401807e+00,   3.75177744e+01,
            8.73217546e+00,   3.38315236e+01,   5.76055685e+01,
            6.11695077e+02,   3.98970414e+03,   5.42415692e+00,
            2.12078133e+00,   3.52389616e+01,   8.43222048e+00,
            1.00726025e+01,   2.72049640e+01,   2.81140796e+02,
            1.71101560e+03,   3.98401807e+00,   2.12078133e+00,
            6.05130899e+01,   1.35184658e+01,   2.13329799e+01,
            5.49951210e+01,   5.80026424e+02,   3.57519614e+03,
            3.75177744e+01,   3.52389616e+01,   6.05130899e+01,
            4.55832329e+00,   1.20799918e+01,   4.59486946e+00,
            2.44995584e+01,   1.52168163e+02,   8.73217546e+00,
            8.43222048e+00,   1.35184658e+01,   4.55832329e+00,
            7.72767984e+00,   7.46219749e+00,   7.36414576e+01,
            4.82050643e+02,   3.38315236e+01,   1.00726025e+01,
            2.13329799e+01,   1.20799918e+01,   7.72767984e+00,
            3.82690126e+00,   3.06302472e+01,   1.75492594e+02,
            5.76055685e+01,   2.72049640e+01,   5.49951210e+01,
            4.59486946e+00,   7.46219749e+00,   3.82690126e+00,
            1.08216970e+01,   6.97553001e+01,   6.11695077e+02,
            2.81140796e+02,   5.80026424e+02,   2.44995584e+01,
            7.36414576e+01,   3.06302472e+01,   1.08216970e+01,
            6.54702760e+00,   3.98970414e+03,   1.71101560e+03,
            3.57519614e+03,   1.52168163e+02,   4.82050643e+02,
            1.75492594e+02,   6.97553001e+01,   6.54702760e+00])

    def test_BaseGravity_pow(self):
        f = np.array(self.f).reshape((-1,1))
        dij = np.array(self.dij).reshape((-1,1))
        model = grav.BaseGravity(f, dij, 'pow')
        np.testing.assert_allclose(model.params, [ 1.27223738], atol = .0001)
        self.assertAlmostEqual(model.aic, 377298.04716333596, delta = .0001)
        np.testing.assert_allclose(model.cov_params, [[  4.31955426e-07]])
        self.assertAlmostEqual(model.deviance, 409811.34329065739, delta = .0001)
        self.assertAlmostEqual(model.llf, -188648.02358166798, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, [ 0.])
        np.testing.assert_allclose(model.std_err, [   0.00065723], atol = .000001)
        np.testing.assert_allclose(model.tvalues, [ 1935.74740017])
        np.testing.assert_allclose(model.yhat,  
            [  363.76143383,   281.50403714,   959.7388893 ,   498.77506053,
            925.03759732,  1106.44361848,  1984.54428735,  2749.95948574,
            363.76143383,   129.70901679,   938.68096943,   488.56203387,
            540.96136464,   852.80642651,  1683.84456031,  2397.81642174,
            281.50403714,   129.70901679,  1123.57104159,   630.10766251,
            773.76239688,  1090.36467516,  1963.64917204,  2703.75625368,
            959.7388893 ,   938.68096943,  1123.57104159,   316.84652033,
            595.67905738,   318.9700416 ,   818.55371165,  1454.18199247,
            498.77506053,   488.56203387,   630.10766251,   316.84652033,
            463.26843623,   453.2156204 ,  1192.42000515,  1891.29566175,
            925.03759732,   540.96136464,   773.76239688,   595.67905738,
            463.26843623,   271.12096396,   891.94447199,  1506.88882976,
            1106.44361848,   852.80642651,  1090.36467516,   318.9700416 ,
            453.2156204 ,   271.12096396,   562.42482847,  1173.32244253,
            1984.54428735,  1683.84456031,  1963.64917204,   818.55371165,
            1192.42000515,   891.94447199,   562.42482847,   416.01781589,
            2749.95948574,  2397.81642174,  2703.75625368,  1454.18199247,
            1891.29566175,  1506.88882976,  1173.32244253,   416.01781589])
    
    def test_QuasiPoisson(self):
        f = np.array(self.f).reshape((-1,1))
        dij = np.array(self.dij).reshape((-1,1))
        model = grav.BaseGravity(f, dij, 'exp', Quasi=True)
        np.testing.assert_allclose(model.params, [0.01641585], atol = .0001)
        self.assertTrue(math.isnan(model.aic))
        np.testing.assert_allclose(model.cov_params, [[ 0.00079749]],
                atol=1.0e-8)
        self.assertAlmostEqual(model.deviance, 1087408.9707170483, delta = .0001)
        self.assertTrue(np.isnan(model.llf))
        self.assertTrue(np.isnan(model.llnull))
        np.testing.assert_allclose(model.pvalues, [ 0.56103881])
        np.testing.assert_allclose(model.std_err, [ 0.02823993], atol=1.0e-8)
        np.testing.assert_allclose(model.tvalues, [ 0.58129922])
        np.testing.assert_allclose(model.yhat, 
            [  5.42415692e+00,   3.98401807e+00,   3.75177744e+01,
            8.73217546e+00,   3.38315236e+01,   5.76055685e+01,
            6.11695077e+02,   3.98970414e+03,   5.42415692e+00,
            2.12078133e+00,   3.52389616e+01,   8.43222048e+00,
            1.00726025e+01,   2.72049640e+01,   2.81140796e+02,
            1.71101560e+03,   3.98401807e+00,   2.12078133e+00,
            6.05130899e+01,   1.35184658e+01,   2.13329799e+01,
            5.49951210e+01,   5.80026424e+02,   3.57519614e+03,
            3.75177744e+01,   3.52389616e+01,   6.05130899e+01,
            4.55832329e+00,   1.20799918e+01,   4.59486946e+00,
            2.44995584e+01,   1.52168163e+02,   8.73217546e+00,
            8.43222048e+00,   1.35184658e+01,   4.55832329e+00,
            7.72767984e+00,   7.46219749e+00,   7.36414576e+01,
            4.82050643e+02,   3.38315236e+01,   1.00726025e+01,
            2.13329799e+01,   1.20799918e+01,   7.72767984e+00,
            3.82690126e+00,   3.06302472e+01,   1.75492594e+02,
            5.76055685e+01,   2.72049640e+01,   5.49951210e+01,
            4.59486946e+00,   7.46219749e+00,   3.82690126e+00,
            1.08216970e+01,   6.97553001e+01,   6.11695077e+02,
            2.81140796e+02,   5.80026424e+02,   2.44995584e+01,
            7.36414576e+01,   3.06302472e+01,   1.08216970e+01,
            6.54702760e+00,   3.98970414e+03,   1.71101560e+03,
            3.57519614e+03,   1.52168163e+02,   4.82050643e+02,
            1.75492594e+02,   6.97553001e+01,   6.54702760e+00])
    
    def test_Gravity(self):
        model = grav.Gravity(self.f, self.o_var, self.d_var,
                self.dij, 'exp')
        np.testing.assert_allclose(model.params, [ 0.44051324,  0.5144978,
            -0.00976746])
        self.assertAlmostEqual(model.aic, 33004.1458886, delta = .0001)
        np.testing.assert_allclose(model.cov_params, [[  1.12101850e-05,
            -1.09133569e-05,  -1.44593711e-08],
            [ -1.09133569e-05,   1.10801323e-05,  -1.23580963e-08],
            [ -1.44593711e-08,  -1.23580963e-08,   2.11497156e-09]])
        self.assertAlmostEqual(model.deviance, 29051.791954, delta = .0001)
        self.assertAlmostEqual(model.llf, -16499.0729443, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, [0., 0., 0.])
        np.testing.assert_allclose(model.std_err, [  3.34816144e-03,   3.32868327e-03,
            4.59888200e-05])
        np.testing.assert_allclose(model.tvalues, [ 131.5686976,   154.56496075,
            -212.38771233])
        np.testing.assert_allclose(model.yhat, 
            [  2791.71294459,   3450.9181662 ,    344.35367686,   1195.8168102 ,
            519.06514371,    285.39822879,     62.00029499,     14.46008341,
            2476.40288126,  10178.48689237,    724.46765915,   2474.67971095,
            2163.32521114,    903.92942165,    199.56985231,     48.50282363,
            3472.5689778 ,  11546.46123418,    612.90019043,   2180.94678642,
            1615.46535168,    693.98410032,    151.37195314,     36.51168734,
            412.74282775,    978.91114569,    730.04284105,   1879.61605356,
            1022.73834302,   1371.83645825,    449.01488086,    107.81413822,
            1259.84153016,   2939.13628073,   2283.39010725,   1652.13526474,
            1710.55604408,   1318.04651914,    299.09085631,     69.60641198,
            629.16274459,   2956.0542728 ,   1945.9091469 ,   1034.2626935 ,
            1968.00942356,   2192.39883984,    563.51931891,    141.96553438,
            346.7081784 ,   1237.93201505,    837.81110558,   1390.40186809,
            1519.82045346,   2197.30955425,    791.58042696,    185.91772597,
            74.60436444,    270.71659234,    181.00879336,    450.77145086,
            341.60352923,    559.42021561,    784.06616575,    666.83596532,
            18.14169546,     68.59991159,     45.52214916,    112.85166716,
            82.89055652,    146.94298691,    192.00611495,    695.27339343])
        self.assertAlmostEquals(model.D2, 0.834456520292)
        self.assertAlmostEquals(model.adj_D2, 0.829658158561)
        self.assertAlmostEquals(model.SSI, 0.688220359428)
        self.assertAlmostEquals(model.pseudoR2, 0.81258943875)
        self.assertAlmostEquals(model.adj_pseudoR2, 0.812555362188)
        self.assertAlmostEquals(model.SRMSE, 1.0220094905985986)

    def test_local_Gravity(self):
        model = grav.Gravity(self.f, self.o_var, self.d_var, self.dij, 'exp')
        local = model.local(loc_index=self.o, locs=np.unique(self.o))
        self.assertEqual(local.keys().sort(), ['pvalue2', 
                                                'SRMSE', 
                                                'pvalue0',
                                                'deviance', 
                                                'adj_pseudoR2', 
                                                'pvalue1', 
                                                'tvalue0', 
                                                'tvalue2',
                                                'adj_D2', 
                                                'tvalue1', 
                                                'SSI', 
                                                'aic', 
                                                'param1', 
                                                'param0', 
                                                'D2',
                                                'pseudoR2', 
                                                'param2'].sort())
    
    def test_Production(self):
        model = grav.Production(self.f, self.o, self.d_var,
                self.dij, 'exp')
        np.testing.assert_allclose(model.params, [-1.11700938,  0.5696138 ,  
            1.03487752, -0.51400641, -0.23320154, 0.09225167, -0.42761955,  
            0.03771866, -0.0922097 ,  0.89278717, -0.00727113], atol = .0001)
        self.assertAlmostEqual(model.aic, 15882.651018068489, delta = .0001)
        np.testing.assert_allclose(model.cov_params, 
            [[ 2.58467540e-03,   2.25525153e-03,   2.25698879e-03,
               2.27598630e-03,   2.28753498e-03,   2.29518139e-03,
               2.26066086e-03,   2.28389856e-03,   2.30028223e-03,
               -2.24000219e-04,  -9.64855587e-07],
            [  2.25525153e-03,   2.22885311e-03,   2.18057451e-03,
               2.19382566e-03,   2.20716973e-03,   2.21373933e-03,
               2.17974121e-03,   2.19682475e-03,   2.20967384e-03,
               -2.16966417e-04,  -8.72732269e-07],
            [  2.25698879e-03,   2.18057451e-03,   2.21642787e-03,
               2.19592307e-03,   2.20904148e-03,   2.21570366e-03,
               2.18175104e-03,   2.19942376e-03,   2.21260234e-03,
               -2.17060431e-04,  -8.79741394e-07],
            [  2.27598630e-03,   2.19382566e-03,   2.19592307e-03,
               2.43184109e-03,   2.23320408e-03,   2.24276394e-03,
               2.21085295e-03,   2.24737607e-03,   2.27104133e-03,
               -2.16513520e-04,  -1.09288157e-06],
            [  2.28753498e-03,   2.20716973e-03,   2.20904148e-03,
               2.23320408e-03,   2.35994849e-03,   2.25049809e-03,
               2.21741622e-03,   2.24601728e-03,   2.26530460e-03,
               -2.18641277e-04,  -1.00923831e-06],
            [  2.29518139e-03,   2.21373933e-03,   2.21570366e-03,
               2.24276394e-03,   2.25049809e-03,   2.35335488e-03,
               2.22652875e-03,   2.25818713e-03,   2.27918210e-03,
               -2.18996160e-04,  -1.04519353e-06],
            [  2.26066086e-03,   2.17974121e-03,   2.18175104e-03,
               2.21085295e-03,   2.21741622e-03,   2.22652875e-03,
               2.36722952e-03,   2.22827572e-03,   2.25038328e-03,
               -2.15375557e-04,  -1.05779552e-06],
            [  2.28389856e-03,   2.19682475e-03,   2.19942376e-03,
               2.24737607e-03,   2.24601728e-03,   2.25818713e-03,
               2.22827572e-03,   2.51224347e-03,   2.31504070e-03,
               -2.15113513e-04,  -1.28324145e-06],
            [  2.30028223e-03,   2.20967384e-03,   2.21260234e-03,
               2.27104133e-03,   2.26530460e-03,   2.27918210e-03,
               2.25038328e-03,   2.31504070e-03,   2.81219776e-03,
               -2.15302957e-04,  -1.40976210e-06],
            [ -2.24000219e-04,  -2.16966417e-04,  -2.17060431e-04,
              -2.16513520e-04,  -2.18641277e-04,  -2.18996160e-04,
              -2.15375557e-04,  -2.15113513e-04,  -2.15302957e-04,
               2.17985878e-05,   6.51339971e-08],
            [ -9.64855587e-07,  -8.72732269e-07,  -8.79741394e-07,
              -1.09288157e-06,  -1.00923831e-06,  -1.04519353e-06,
              -1.05779552e-06,  -1.28324145e-06,  -1.40976210e-06,
               6.51339971e-08,   2.77308674e-09]])
        self.assertAlmostEqual(model.deviance, 15279.974241770311, delta = .0001)
        self.assertAlmostEqual(model.llf, -7930.3255090342445, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, 
            [  5.43122294e-107,   1.60984652e-033,   4.30597019e-107,
            1.94310017e-025,   1.58325196e-006,   5.72169717e-002,
            1.50954058e-018,   4.51730708e-001,   8.20670992e-002,
            0.00000000e+000,   0.00000000e+000])
        np.testing.assert_allclose(model.std_err, 
            [  5.08397030e-02,   4.72107308e-02,   4.70789536e-02,
            4.93137008e-02,   4.85793011e-02,   4.85113892e-02,
            4.86541830e-02,   5.01222852e-02,   5.30301589e-02,
            4.66889578e-03,   5.26601057e-05])
        np.testing.assert_allclose(model.tvalues, 
            [ -21.97120187,   12.06534585,   21.98174424,  -10.4231968 ,
            -4.80043014,    1.90164966,   -8.78895757,    0.75253281,
            -1.73881619,  191.22019711, -138.07670549])
        np.testing.assert_allclose(model.yhat, 
            [  1.40705950e+03,   1.69457663e+03,   1.16508879e+02,
            4.27850723e+02,   2.23425179e+02,   1.08301078e+02,
            3.08300817e+01,   7.44793331e+00,   1.81162644e+03,
            1.21014912e+04,   6.46999802e+02,   2.34696906e+03,
            2.06388796e+03,   8.15528209e+02,   2.34966095e+02,
            5.85312512e+01,   3.30741049e+03,   1.83446566e+04,
            8.10873546e+02,   3.03231168e+03,   2.35717102e+03,
            9.50837295e+02,   2.71489717e+02,   6.72496632e+01,
            2.60277189e+02,   1.12260001e+03,   9.28118288e+02,
            1.04284804e+03,   6.44343295e+02,   6.06652130e+02,
            2.34315477e+02,   5.78455649e+01,   6.57379261e+02,
            2.80075361e+03,   2.38710037e+03,   7.17245241e+02,
            1.03993511e+03,   6.48056270e+02,   1.90566474e+02,
            4.59636590e+01,   4.99603238e+02,   3.58445439e+03,
            2.70058180e+03,   6.44960859e+02,   1.51347637e+03,
            1.20618713e+03,   3.89165529e+02,   9.95706858e+01,
            2.34675109e+02,   1.37251483e+03,   1.05563448e+03,
            5.88432822e+02,   9.13951678e+02,   1.16884200e+03,
            3.66858927e+02,   8.90901579e+01,   1.31244011e+02,
            7.76879800e+02,   5.92149430e+02,   4.46507449e+02,
            5.27992298e+02,   7.40876898e+02,   7.20725128e+02,
            4.04624989e+02,   5.02255240e+01,   3.06563409e+02,
            2.32354948e+02,   1.74615053e+02,   2.01734215e+02,
            3.00280455e+02,   2.77258060e+02,   6.40968342e+02])
        self.assertAlmostEquals(model.D2, 0.912931356874)
        self.assertAlmostEquals(model.adj_D2, 0.89865780882)
        self.assertAlmostEquals(model.SSI, 0.740619203383)
        self.assertAlmostEquals(model.pseudoR2, 0.909920590111)
        self.assertAlmostEquals(model.adj_pseudoR2, 0.909795642717)
        self.assertAlmostEquals(model.SRMSE, 0.46626328789729393)

    def test_local_Production(self):
        model = grav.Production(self.f, self.o, self.d_var, self.dij, 'exp')
        local = model.local(locs=np.unique(self.o))
        self.assertEqual(local.keys().sort(), ['pvalue2', 
                                                'SRMSE', 
                                                'pvalue0',
                                                'deviance', 
                                                'adj_pseudoR2', 
                                                'pvalue1', 
                                                'tvalue0', 
                                                'tvalue2',
                                                'adj_D2', 
                                                'tvalue1', 
                                                'SSI', 
                                                'aic', 
                                                'param1', 
                                                'param0', 
                                                'D2',
                                                'pseudoR2', 
                                                'param2'].sort())
                                                  
    def test_Attraction(self):
        model = grav.Production(self.f, self.d, self.o_var,
                self.dij, 'exp')
        np.testing.assert_allclose(model.params, 
                [-0.88439723,  0.73740882,  1.04332355, -0.75977722, -0.26060911,
                -0.1879365 , -0.67530313, -0.19871953, -0.39900098,  0.89235874,
                -0.00693755], atol = .0001)
        self.assertAlmostEqual(model.aic, 16275.899321893821, delta = .0001)
        np.testing.assert_allclose(model.cov_params, 
            [[  3.01436996e-03,   2.75262767e-03,   2.69617868e-03,
            2.75263367e-03,   2.76096809e-03,   2.76082495e-03,
            2.73320039e-03,   2.77096042e-03,   2.80156716e-03,
            -2.71488782e-04,  -1.17108280e-06],
            [  2.75262767e-03,   2.72725703e-03,   2.63241450e-03,
            2.68345714e-03,   2.69359309e-03,   2.69264448e-03,
            2.66538758e-03,   2.69705597e-03,   2.72384308e-03,
            -2.65699549e-04,  -1.08479153e-06],
            [  2.69617868e-03,   2.63241450e-03,   2.61511832e-03,
            2.63025621e-03,   2.63909790e-03,   2.63860796e-03,
            2.61206899e-03,   2.64590548e-03,   2.67381997e-03,
            -2.59870000e-04,  -1.09419859e-06],
            [  2.75263367e-03,   2.68345714e-03,   2.63025621e-03,
            2.93687480e-03,   2.69787111e-03,   2.69944743e-03,
            2.67310431e-03,   2.72096984e-03,   2.75739588e-03,
            -2.63511222e-04,  -1.26675817e-06],
            [  2.76096809e-03,   2.69359309e-03,   2.63909790e-03,
            2.69787111e-03,   2.82012775e-03,   2.70486370e-03,
            2.67807014e-03,   2.71951056e-03,   2.75213707e-03,
            -2.65196970e-04,  -1.19678325e-06],
            [  2.76082495e-03,   2.69264448e-03,   2.63860796e-03,
            2.69944743e-03,   2.70486370e-03,   2.82788771e-03,
            2.67918953e-03,   2.72327074e-03,   2.75746837e-03,
            -2.64826047e-04,  -1.22641311e-06],
            [  2.73320039e-03,   2.66538758e-03,   2.61206899e-03,
            2.67310431e-03,   2.67807014e-03,   2.67918953e-03,
            2.85686854e-03,   2.69753883e-03,   2.73200584e-03,
            -2.62037343e-04,  -1.22568680e-06],
            [  2.77096042e-03,   2.69705597e-03,   2.64590548e-03,
            2.72096984e-03,   2.71951056e-03,   2.72327074e-03,
            2.69753883e-03,   3.01269943e-03,   2.80463020e-03,
            -2.63381525e-04,  -1.43182005e-06],
            [  2.80156716e-03,   2.72384308e-03,   2.67381997e-03,
            2.75739588e-03,   2.75213707e-03,   2.75746837e-03,
            2.73200584e-03,   2.80463020e-03,   3.37945677e-03,
            -2.64964684e-04,  -1.55786850e-06],
            [ -2.71488782e-04,  -2.65699549e-04,  -2.59870000e-04,
            -2.63511222e-04,  -2.65196970e-04,  -2.64826047e-04,
            -2.62037343e-04,  -2.63381525e-04,  -2.64964684e-04,
            2.64461183e-05,   8.70031728e-08],
            [ -1.17108280e-06,  -1.08479153e-06,  -1.09419859e-06,
            -1.26675817e-06,  -1.19678325e-06,  -1.22641311e-06,
            -1.22568680e-06,  -1.43182005e-06,  -1.55786850e-06,
            8.70031728e-08,   2.62593686e-09]])
        self.assertAlmostEqual(model.deviance, 15673.222613627502, delta = .0001)
        self.assertAlmostEqual(model.llf, -8126.9496609469106, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, 
            [  2.23154436e-58,   2.84596439e-45,   1.60422925e-92,
            1.17853681e-44,   9.22717986e-07,   4.09150807e-04,
            1.36480824e-36,   2.94090148e-04,   6.71572334e-12,
            0.00000000e+00,   0.00000000e+00])
        np.testing.assert_allclose(model.std_err, 
            [  5.49032782e-02,   5.22231465e-02,   5.11382276e-02,
            5.41929405e-02,   5.31048750e-02,   5.31778874e-02,
            5.34496823e-02,   5.48880627e-02,   5.81330953e-02,
            5.14257895e-03,   5.12438958e-05])
        np.testing.assert_allclose(model.tvalues, 
            [ -16.10827734,   14.12034455,   20.4020279 ,  -14.01985592,
            -4.90744228,   -3.53410997,  -12.63437119,   -3.62045082,
            -6.86357714,  173.52358548, -135.38293645])
        np.testing.assert_allclose(model.yhat, 
            [  1.79502279e+03,   2.77690999e+03,   1.77376340e+02,
            5.41058308e+02,   3.28265191e+02,   1.61020145e+02,
            9.55492240e+01,   3.54052486e+01,   1.48342439e+03,
            1.51642463e+04,   7.61962380e+02,   2.29718733e+03,
            2.29156465e+03,   9.24935115e+02,   5.55191561e+02,
            2.11833031e+02,   2.31106289e+03,   1.52712766e+04,
            8.29095427e+02,   2.57322937e+03,   2.28197035e+03,
            9.39377653e+02,   5.59026730e+02,   2.12153271e+02,
            1.78795020e+02,   9.29389609e+02,   1.00418629e+03,
            8.13086106e+02,   5.79191340e+02,   5.35268359e+02,
            4.24969889e+02,   1.60758895e+02,   5.47719688e+02,
            2.81394269e+03,   3.12998907e+03,   8.16565623e+02,
            1.15732912e+03,   7.21460431e+02,   4.41575377e+02,
            1.63374443e+02,   3.87326254e+02,   3.27181524e+03,
            3.23528198e+03,   6.77976176e+02,   1.34894643e+03,
            1.19916138e+03,   8.01876754e+02,   3.13863001e+02,
            1.75685709e+02,   1.22115852e+03,   1.23153422e+03,
            5.79386090e+02,   7.77596785e+02,   1.10887286e+03,
            7.06986190e+02,   2.63279368e+02,   4.96907636e+01,
            3.49378290e+02,   3.49326167e+02,   2.19253703e+02,
            2.26850151e+02,   3.53430501e+02,   3.36979293e+02,
            5.49332748e+02,   1.22952888e+01,   8.90162551e+01,
            8.85260032e+01,   5.53842615e+01,   5.60455225e+01,
            9.23759900e+01,   8.37976212e+01,   3.66824277e+02])
        self.assertAlmostEquals(model.D2, .910690541438)
        self.assertAlmostEquals(model.adj_D2, .896049646592)
        self.assertAlmostEquals(model.SSI, .750634498293)
        self.assertAlmostEquals(model.pseudoR2, .90768716507)
        self.assertAlmostEquals(model.adj_pseudoR2, .907562217676)
        self.assertAlmostEquals(model.SRMSE, 0.59483126233090433)

    def test_local_Attraction(self):
        model = grav.Attraction(self.f, self.d, self.o_var, self.dij, 'exp')
        local = model.local(locs=np.unique(self.d))
        self.assertEqual(local.keys().sort(), ['pvalue2', 
                                                'SRMSE', 
                                                'pvalue0',
                                                'deviance', 
                                                'adj_pseudoR2', 
                                                'pvalue1', 
                                                'tvalue0', 
                                                'tvalue2',
                                                'adj_D2', 
                                                'tvalue1', 
                                                'SSI', 
                                                'aic', 
                                                'param1', 
                                                'param0', 
                                                'D2',
                                                'pseudoR2', 
                                                'param2'].sort())

    def test_Doubly(self):
        model = grav.Doubly(self.f, self.o, self.d,
                self.dij, 'exp')
        np.testing.assert_allclose(model.params, 
            [  1.49709841e+00,   2.18492741e+00,   1.87848176e-01,
            6.64345148e-01,   7.42649379e-01,   2.13345351e-01,
            6.67657810e-01,   3.99860937e-01,   6.20471518e+00,
            7.74962468e+00,   8.64614438e+00,   6.90395892e+00,
            7.15340702e+00,   7.49439155e+00,   6.94741533e+00,
            7.39940090e+00,   7.19345711e+00,  -7.91533311e-03])
        self.assertAlmostEqual(model.aic, 9977.1591414502109, delta = .0001)
        np.testing.assert_allclose(model.cov_params, 
            [[  2.42563703e-04,   1.84733809e-04,   1.89259451e-04,
            1.91681710e-04,   1.89152965e-04,   1.92231256e-04,
            1.87441436e-04,   1.86834624e-04,  -2.12557582e-04,
            -1.85482863e-04,  -2.14024619e-04,  -2.11064638e-04,
            -2.06862321e-04,  -2.13608850e-04,  -2.10640872e-04,
            -2.17216459e-04,  -2.18470971e-04,   1.13843139e-07],
            [  1.84733809e-04,   2.63915732e-04,   2.06737361e-04,
            2.02941436e-04,   2.03812109e-04,   2.06876793e-04,
            2.08793972e-04,   2.09473765e-04,  -2.30973877e-04,
            -2.35038219e-04,  -1.70143798e-04,  -2.05817163e-04,
            -2.09270447e-04,  -2.11179236e-04,  -2.07192858e-04,
            -2.05101234e-04,  -2.04407823e-04,  -1.94248549e-08],
            [  1.89259451e-04,   2.06737361e-04,   4.53792323e-04,
            2.01217128e-04,   2.05155865e-04,   2.05806138e-04,
            2.14332194e-04,   2.21550755e-04,  -1.98360054e-04,
            -1.94813739e-04,  -1.74043824e-04,  -1.79955670e-04,
            -2.00249554e-04,  -1.96708288e-04,  -2.09795316e-04,
            -2.07058650e-04,  -1.99681815e-04,  -9.10506514e-08],
            [  1.91681710e-04,   2.02941436e-04,   2.01217128e-04,
            3.17290867e-04,   2.00121482e-04,   2.02120689e-04,
            2.06522637e-04,   2.08554008e-04,  -2.04848380e-04,
            -1.98117102e-04,  -1.83618154e-04,  -2.07840280e-04,
            -1.82826360e-04,  -2.01083472e-04,  -2.03827844e-04,
            -1.99372606e-04,  -1.97090647e-04,  -4.37219119e-08],
            [  1.89152965e-04,   2.03812109e-04,   2.05155865e-04,
            2.00121482e-04,   3.26458468e-04,   2.01391450e-04,
            2.09628557e-04,   2.14889547e-04,  -1.97315240e-04,
            -1.96966358e-04,  -1.78246708e-04,  -1.96030118e-04,
            -1.93177196e-04,  -1.81632388e-04,  -2.08658217e-04,
            -2.01831801e-04,  -1.96793054e-04,  -7.68167253e-08],
            [  1.92231256e-04,   2.06876793e-04,   2.05806138e-04,
            2.02120689e-04,   2.01391450e-04,   4.14676504e-04,
            2.11496728e-04,   2.21430978e-04,  -2.04713619e-04,
            -1.99872552e-04,  -1.81435387e-04,  -2.17387447e-04,
            -2.03438822e-04,  -2.15975048e-04,  -1.94747314e-04,
            -2.29253582e-04,  -2.19396689e-04,  -2.25147281e-08],
            [  1.87441436e-04,   2.08793972e-04,   2.14332194e-04,
            2.06522637e-04,   2.09628557e-04,   2.11496728e-04,
            5.06851801e-04,   2.14569472e-04,  -1.92147501e-04,
            -1.92256318e-04,  -1.67373803e-04,  -1.99536301e-04,
            -1.85234692e-04,  -1.95220763e-04,  -2.12076508e-04,
            -1.74748404e-04,  -3.15464930e-04,  -1.33183180e-07],
            [  1.86834624e-04,   2.09473765e-04,   2.21550755e-04,
            2.08554008e-04,   2.14889547e-04,   2.21430978e-04,
            2.14569472e-04,   8.07696796e-04,  -1.90223393e-04,
            -1.91005620e-04,  -1.64892620e-04,  -1.90136139e-04,
            -1.80941924e-04,  -1.88390040e-04,  -1.99615358e-04,
            -3.08949366e-04,  -1.73275263e-04,  -1.49419116e-07],
            [ -2.12557582e-04,  -2.30973877e-04,  -1.98360054e-04,
            -2.04848380e-04,  -1.97315240e-04,  -2.04713619e-04,
            -1.92147501e-04,  -1.90223393e-04,   5.01690795e-04,
            2.34604925e-04,   2.15829388e-04,   2.54545792e-04,
            2.45346420e-04,   2.53731101e-04,   2.49832769e-04,
            2.66780923e-04,   2.70158589e-04,  -2.88654296e-07],
            [ -1.85482863e-04,  -2.35038219e-04,  -1.94813739e-04,
            -1.98117102e-04,  -1.96966358e-04,  -1.99872552e-04,
            -1.92256318e-04,  -1.91005620e-04,   2.34604925e-04,
            2.77338030e-04,   1.86945338e-04,   2.28276363e-04,
            2.22769121e-04,   2.28218883e-04,   2.25960817e-04,
            2.36170239e-04,   2.38337459e-04,  -1.71284609e-07],
            [ -2.14024619e-04,  -1.70143798e-04,  -1.74043824e-04,
            -1.83618154e-04,  -1.78246708e-04,  -1.81435387e-04,
            -1.67373803e-04,  -1.64892620e-04,   2.15829388e-04,
            1.86945338e-04,   2.45803385e-04,   2.29398497e-04,
            2.16802998e-04,   2.26157245e-04,   2.24998100e-04,
            2.43491383e-04,   2.47501416e-04,  -2.99347493e-07],
            [ -2.11064638e-04,  -2.05817163e-04,  -1.79955670e-04,
            -2.07840280e-04,  -1.96030118e-04,  -2.17387447e-04,
            -1.99536301e-04,  -1.90136139e-04,   2.54545792e-04,
            2.28276363e-04,   2.29398497e-04,   4.81070964e-04,
            2.56007624e-04,   2.69174189e-04,   2.66750505e-04,
            2.96278814e-04,   3.07523359e-04,  -4.35727563e-07],
            [ -2.06862321e-04,  -2.09270447e-04,  -2.00249554e-04,
            -1.82826360e-04,  -1.93177196e-04,  -2.03438822e-04,
            -1.85234692e-04,  -1.80941924e-04,   2.45346420e-04,
            2.22769121e-04,   2.16802998e-04,   2.56007624e-04,
            3.63658820e-04,   2.53530192e-04,   2.51566361e-04,
            2.75202102e-04,   2.81144405e-04,  -3.64321585e-07],
            [ -2.13608850e-04,  -2.11179236e-04,  -1.96708288e-04,
            -2.01083472e-04,  -1.81632388e-04,  -2.15975048e-04,
            -1.95220763e-04,  -1.88390040e-04,   2.53731101e-04,
            2.28218883e-04,   2.26157245e-04,   2.69174189e-04,
            2.53530192e-04,   3.60293800e-04,   2.60651465e-04,
            2.88323917e-04,   2.97276990e-04,  -4.03684411e-07],
            [ -2.10640872e-04,  -2.07192858e-04,  -2.09795316e-04,
            -2.03827844e-04,  -2.08658217e-04,  -1.94747314e-04,
            -2.12076508e-04,  -1.99615358e-04,   2.49832769e-04,
            2.25960817e-04,   2.24998100e-04,   2.66750505e-04,
            2.51566361e-04,   2.60651465e-04,   4.37541208e-04,
            2.87192980e-04,   3.00841537e-04,  -3.80706214e-07],
            [ -2.17216459e-04,  -2.05101234e-04,  -2.07058650e-04,
            -1.99372606e-04,  -2.01831801e-04,  -2.29253582e-04,
            -1.74748404e-04,  -3.08949366e-04,   2.66780923e-04,
            2.36170239e-04,   2.43491383e-04,   2.96278814e-04,
            2.75202102e-04,   2.88323917e-04,   2.87192980e-04,
            5.80191216e-04,   3.22518390e-04,  -5.30363748e-07],
            [ -2.18470971e-04,  -2.04407823e-04,  -1.99681815e-04,
            -1.97090647e-04,  -1.96793054e-04,  -2.19396689e-04,
            -3.15464930e-04,  -1.73275263e-04,   2.70158589e-04,
            2.38337459e-04,   2.47501416e-04,   3.07523359e-04,
            2.81144405e-04,   2.97276990e-04,   3.00841537e-04,
            3.22518390e-04,   8.53001477e-04,  -5.59442560e-07],
            [  1.13843139e-07,  -1.94248549e-08,  -9.10506514e-08,
            -4.37219119e-08,  -7.68167253e-08,  -2.25147281e-08,
            -1.33183180e-07,  -1.49419116e-07,  -2.88654296e-07,
            -1.71284609e-07,  -2.99347493e-07,  -4.35727563e-07,
            -3.64321585e-07,  -4.03684411e-07,  -3.80706214e-07,
            -5.30363748e-07,  -5.59442560e-07,   2.56252122e-09]])
        self.assertAlmostEqual(model.deviance, 9360.482092561484, delta = .0001)
        self.assertAlmostEqual(model.llf, -4970.5795707251054, delta = .0001)
        self.assertAlmostEqual(model.llnull, -88037.0499629, delta = .0001)
        np.testing.assert_allclose(model.pvalues, 
            [  0.00000000e+000,   0.00000000e+000,   1.16346714e-018,
            1.88877600e-304,   0.00000000e+000,   1.10421926e-025,
            2.83322217e-193,   5.83172788e-045,   0.00000000e+000,
            0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
            0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
            0.00000000e+000,   0.00000000e+000,   0.00000000e+000])
        np.testing.assert_allclose(model.std_err, 
            [  1.55744567e-02,   1.62454834e-02,   2.13024018e-02,
            1.78126603e-02,   1.80681617e-02,   2.03636073e-02,
            2.25133694e-02,   2.84200070e-02,   2.23984552e-02,
            1.66534690e-02,   1.56781180e-02,   2.19333300e-02,
            1.90698406e-02,   1.89814067e-02,   2.09174857e-02,
            2.40871587e-02,   2.92061890e-02,   5.06213514e-05])
        np.testing.assert_allclose(model.tvalues, 
            [  96.12524108,  134.49445277,    8.81816885,   37.29623407,
            41.10265285,   10.47679558,   29.65605897,   14.06969877,
            277.01531761,  465.34596906,  551.47845915,  314.77021149,
            375.11624684,  394.828037  ,  332.13434099,  307.19276533,
            246.2990671 , -156.36352821])
        np.testing.assert_allclose(model.yhat, 
            [  9.78988280e+02,   2.26003279e+03,   1.04038742e+02,
            3.38382580e+02,   1.90458075e+02,   8.67908467e+01,
            4.37554720e+01,   1.35532201e+01,   1.02693176e+03,
            1.43579537e+04,   5.02646536e+02,   1.61314478e+03,
            1.60124044e+03,   5.84144805e+02,   2.98377549e+02,
            9.55604104e+01,   2.92086883e+03,   1.76899160e+04,
            9.49267467e+02,   3.14910952e+03,   2.73315395e+03,
            1.01972797e+03,   5.15779061e+02,   1.64177257e+02,
            1.73496758e+02,   7.99088484e+02,   1.22486311e+03,
            9.31563443e+02,   6.29698756e+02,   5.91117070e+02,
            4.15424488e+02,   1.31747905e+02,   4.49674437e+02,
            2.04361676e+03,   3.23802841e+03,   7.42345992e+02,
            1.00234547e+03,   6.00432512e+02,   3.13590596e+02,
            9.69658353e+01,   3.29132064e+02,   2.63792996e+03,
            3.65458094e+03,   6.52540343e+02,   1.30346098e+03,
            1.16517842e+03,   6.73203489e+02,   2.21973821e+02,
            1.47356669e+02,   9.45479887e+02,   1.33962391e+03,
            6.01828982e+02,   7.67131590e+02,   1.14476805e+03,
            6.43385796e+02,   2.00425139e+02,   7.41169755e+01,
            4.81822820e+02,   6.76007805e+02,   4.21969575e+02,
            3.99722086e+02,   6.59873779e+02,   6.41890452e+02,
            9.85596546e+02,   2.44225078e+01,   1.64157859e+02,
            2.28909306e+02,   1.42362371e+02,   1.31485029e+02,
            2.31461478e+02,   2.12717926e+02,   1.04848355e+03])
        self.assertAlmostEquals(model.D2, .946661920897)
        self.assertAlmostEquals(model.adj_D2, .929870303401)
        self.assertAlmostEquals(model.SSI, .811852110904)
        self.assertAlmostEquals(model.pseudoR2, .943539912198)
        self.assertAlmostEquals(model.adj_pseudoR2, .943335452826)
        self.assertAlmostEquals(model.SRMSE, 0.37928618532947161)

if __name__ == '__main__':
    unittest.main()
